services:
    backend:
      build:
        dockerfile: ./Dockerfile
        context: ./
      environment:
        APP_CONFIG__DB__URL: postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
      ports:
          - "8000:8000"
      volumes:
          - .:/app
      env_file:
        - .env
      depends_on:
        pg:
          condition: service_healthy

    tests:
      build:
        dockerfile: ./Dockerfile
        context: ./
      entrypoint: ""
      command: [ "pytest", "-v", "app/notes/tests" ]
      environment:
        APP_CONFIG__DB__URL: postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
      volumes:
        - .:/app
      env_file:
        - .env
      depends_on:
        pg:
          condition: service_healthy

    pg:
      image: postgres:latest
      restart: always
      environment:
        POSTGRES_USER: ${POSTGRES_USER}
        POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        POSTGRES_DB: ${POSTGRES_DB}
      volumes:
          - postgres_data:/var/lib/postgresql/data
      ports:
          - "5432:5432"
      healthcheck:
          test: [ "CMD-SHELL", "pg_isready -U $POSTGRES_USER" ]
          interval: 10s
          timeout: 5s
          retries: 3
      env_file:
        - .env

    pgadmin:
        image: dpage/pgadmin4
        environment:
            PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
            PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
        ports:
            - "8080:80"
        depends_on:
          pg:
            condition: service_healthy


volumes:
  postgres_data: